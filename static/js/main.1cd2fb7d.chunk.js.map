{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/DoneTask.js","components/DoneList.js","components/EmptyInfo.js","components/ModalRemove.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","important","date","valid","handleText","e","setState","target","value","handleImportant","checked","handleDate","handleClick","length","props","add","maxDate","Number","this","String","className","type","placeholder","id","onChange","htmlFor","min","max","onClick","React","Component","Task","mark","task","begin","name","deadline","done","showModal","TaskList","activeTasks","tasks","filter","active","sort","a","b","toLowerCase","map","key","DoneTask","finish","toLocaleString","remove","DoneList","doneTasks","EmptyInfo","ModalRemove","modal","number","hideModal","stopPropagation","App","idCounter","handleDone","handleRemove","addTask","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cd2fb7d.chunk.js","sourcesContent":["import React from 'react';\nimport './addTask.css';\n\nclass AddTask extends React.Component {\n    minDate = new Date().toISOString().slice(0, 10);\n    state = {\n        text: '',\n        important: false,\n        date: this.minDate,\n        valid: true\n    };\n    handleText = (e) => {\n        this.setState({text: e.target.value});\n    };\n    handleImportant = (e) => {\n        this.setState({important: e.target.checked});\n    };\n    handleDate = (e) => {\n        this.setState({date: e.target.value});\n    };\n    handleClick = () => {\n        const {text, important, date} = this.state;\n        if(text.length > 2) {\n            this.props.add(text, important, date);\n            this.setState({text: '', important: false, date: this.minDate, valid: true});\n        } else {\n            this.setState({valid: false});\n        }\n    };\n    render() {\n        let maxDate = Number(this.minDate.slice(0, 4)) + 1;\n        maxDate = String(maxDate + '-12-31');\n        return (\n            <div className=\"add-task\">\n                <h3>Dodaj zadanie</h3>\n                <div className={this.state.valid ? 'add-part' : 'add-part validate'}>\n                    <input type=\"text\" placeholder=\"dodaj zadanie\" id=\"task\" onChange={this.handleText} value={this.state.text}/>\n                    <input type=\"checkbox\" id=\"important\" onChange={this.handleImportant} checked={this.state.important}/>\n                    <label htmlFor=\"important\">Priorytet</label>\n                    <span className=\"validate_msg\">minimalna ilość znaków: 3</span>\n                </div>\n                <div className=\"add-part\">\n                    <label htmlFor=\"date\">Do kiedy zrobić</label>\n                    <input type=\"date\" id=\"date\" min={this.minDate} max={maxDate} onChange={this.handleDate} value={this.state.date}/>\n                </div>\n                <button className=\"btn_add_task\" onClick={this.handleClick}>Dodaj</button>\n                <hr/>\n            </div>\n        );\n    }\n}\n\nexport default AddTask;","import React from 'react';\n\nconst Task = (props) => {\n    let mark = props.task.id;\n    return (\n        <tr>\n            <td>\n                {props.task.begin}\n            </td>\n            <td className={props.task.important ? 'important' : ''}>\n                {props.task.name}\n            </td>\n            <td>\n                {props.task.deadline}\n            </td>\n            <td>\n                <button onClick={() => props.done(mark)} className=\"btn_done\">Zrobione</button>\n                <button onClick={() => props.showModal(mark)} className=\"btn_remove\">Usuń</button>\n            </td>\n        </tr>\n    )\n};\n\nexport default Task;","import React from 'react';\nimport Task from './Task.js';\n\nconst TaskList = (props) => {\n    let activeTasks = props.tasks.filter(task => task.active);\n    if(activeTasks.length > 1) {\n        activeTasks.sort((a, b) => {\n            a = a.name.toLowerCase();\n            b = b.name.toLowerCase();\n            if(a < b) return -1;\n            if(a > b) return 1;\n            return 0;\n        });\n    }\n    const tasks = activeTasks.map(task => <Task key={task.id} task={task} done={props.done} showModal={props.showModal}/>);\n    return (\n        <div className=\"tasks-current\">\n            <h3>Zadania do zrobienia</h3>\n            <table>\n                <thead>\n                <tr>\n                    <th>Data dodania</th>\n                    <th>Zadanie</th>\n                    <th>Deadline</th>\n                    <th>Opcje</th>\n                </tr>\n                </thead>\n                <tbody>\n                {tasks}\n                </tbody>\n            </table>\n            <hr/>\n        </div>\n    )\n};\n\nexport default TaskList;","import React from 'react';\n\nconst DoneTask = (props) => {\n    let mark = props.task.id;\n    return (\n        <tr>\n            <td>\n                {props.task.name}\n            </td>\n            <td>\n                <i>zakończone {props.task.finish.toLocaleString()}</i>\n            </td>\n            <td>\n                <button onClick={() => props.remove(mark)} className=\"btn_remove\">Usuń</button>\n            </td>\n        </tr>\n    )\n};\n\nexport default DoneTask;","import React from 'react';\nimport DoneTask from './DoneTask.js';\n\nconst DoneList = (props) => {\n    let done = props.tasks.filter(task => task.finish);\n    if(done.length > 1) {\n        done.sort((a, b) => {return b.finish - a.finish});\n    }\n    const doneTasks = done.map(task => <DoneTask key={task.id} task={task} remove={props.remove}/>);\n    return (\n        <div className=\"tasks-done\">\n            <h3>Zadania wykonane <em>({done.length})</em></h3>\n            <table>\n                <tbody>\n                {doneTasks.slice(0, 3)}\n                </tbody>\n            </table>\n        </div>\n    )\n};\n\nexport default DoneList;","import React from 'react';\n\nconst EmptyInfo = () => {\n    return (\n        <p className=\"empty-info\">Aktualnie nie ma żadnych zadań do zrobienia</p>\n    )\n};\n\nexport default EmptyInfo;","import React from 'react';\n\nconst ModalRemove = (props) => {\n    let mark = props.modal.number;\n    return (\n        <div className=\"modal-container\" onClick={props.hideModal}>\n            <div className=\"modal-remove\" onClick={(e) => e.stopPropagation()}>\n                <p>Czy na pewno usunąć to zadanie?</p>\n                <button className=\"btn_cancel\" onClick={props.hideModal}>Anuluj</button>\n                <button className=\"btn_remove\" onClick={() => props.remove(mark)}>Usuń</button>\n            </div>\n        </div>\n    )\n};\n\nexport default ModalRemove;","import React from 'react';\nimport AddTask from './AddTask.js';\nimport TaskList from './TaskList.js';\nimport DoneList from './DoneList.js';\nimport EmptyInfo from './EmptyInfo.js';\nimport ModalRemove from './ModalRemove.js';\nimport './App.css';\n\nclass App extends React.Component {\n    state = {\n        tasks: [\n            {\n                id: 0,\n                name: 'Przykładowe zadanie 1',\n                begin: '2019.09.25, 12:20:43',\n                deadline: '2019-12-01',\n                finish: null,\n                important: false,\n                active: true\n            },\n            {\n                id: 1,\n                name: 'Przykładowe zadanie 2',\n                begin: '2019.09.20, 15:34:55',\n                deadline: '2020-11-01',\n                finish: null,\n                important: false,\n                active: true\n            },\n            {\n                id: 2,\n                name: 'Przykładowe zadanie 3',\n                begin: '2019.09.01, 21:02:22',\n                deadline: '2021-05-01',\n                finish: null,\n                important: true,\n                active: true\n            },\n            {\n                id: 3,\n                name: 'Przykładowe zadanie 4',\n                begin: '2019.06.05, 09:20:02',\n                deadline: '2020-03-22',\n                finish: null,\n                important: true,\n                active: true\n            }\n        ],\n        modal: {active: false, number: null}\n    };\n    idCounter = this.state.tasks.length;\n    handleDone = (id) => {\n        let tasks = this.state.tasks.map(task => {\n            if(task.id === id) {\n                task.finish = new Date();\n                task.active = false;\n            }\n            return task;\n        });\n        this.setState({tasks});\n    };\n    handleRemove = (id) => {\n        let tasks = this.state.tasks.map(task => {\n            if(task.id === id) {\n                task.active = false;\n                task.finish = null;\n            }\n            return task;\n        });\n        this.setState({tasks});\n        this.hideModal();\n    };\n    showModal = (number) => {\n        this.setState({modal: {active: true, number: number}});\n    };\n    hideModal = () => {\n        this.setState({modal: {active: false}});\n    };\n    addTask = (name, important, deadline) => {\n        let task = {\n            id: this.idCounter,\n            name,\n            begin: new Date().toLocaleString(),\n            deadline,\n            finish: null,\n            important,\n            active: true\n        };\n        this.idCounter++;\n        let tasks = [...this.state.tasks, task];\n        this.setState({tasks});\n    };\n    render() {\n        const {tasks, modal} = this.state;\n        let active = tasks.filter(task => {\n            return task.active;\n        });\n        return (\n            <React.Fragment>\n                {modal.active ? <ModalRemove hideModal={this.hideModal} remove={this.handleRemove} modal={modal}/> : ''}\n                <div className=\"container\">\n                    <AddTask add={this.addTask}/>\n                    {active.length ? <TaskList tasks={tasks} done={this.handleDone} showModal={this.showModal}/> : <EmptyInfo/>}\n                    <DoneList tasks={tasks} remove={this.handleRemove}/>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}